// Define the pin numbers for the buttons
#include <ESP32Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Arduino.h>
#include <ESP32Encoder.h>

#define BIN_1 26
#define BIN_2 25

ESP32Encoder encoder;

unsigned long curtime;
static unsigned long intertime = 0;

Servo myservo;

#define BUTTON1_PIN 17  // the first button " + "
#define BUTTON2_PIN 16  // the 2nd button "confirm "
#define BUTTON3_PIN 19  // the 3rd button " - "
#define BUTTON4_PIN 14  // the 4th button "reset" + "cleanig"
int servoPin = 21;
// Set the LCD number of columns and rows
int lcdColumns = 16;
int lcdRows = 2;
int test = 0;

/* setting PWM properties */
const int freq = 5000;
const int ledChannel_1 = 1;
const int ledChannel_2 = 2;
const int resolution = 8;
int MAX_PWM_VOLTAGE = 200;
unsigned long time_now = 0;
int laststep = 0;

float kp = 1;
float ki = 0.001;
float kd = 1;
float  gain;
float kv = 0.15;
float ds = 0;
float pp;
float p;
float y_0 = 0.1;
float y_e;
float e;
float esum = 0;
float yi;
float antiI = 0.1;
float dp=0;
float de;
float yd;
float pose;
float posesum = 0;
float v = 0;
float p_last = 0;
const long dt = 20;
float e_last = 0 ; 
float dp_last = 0;
int mod1TS = 2;
int feedbackcheck = 0;
unsigned long  checktime;

// Set the I2C pins
const int SDA_PIN = 23;
const int SCL_PIN = 22;

// Set LCD address, number of columns and rows
// If you don't know your display address, run an I2C scanner sketch
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);

int pos = 0;
int modcheck = 0; // 0 as the server, 1 as personal
int cupnum = 1;
int defaultrot = 3; // lets say 3 is the default for 2table spoon
int totalrot; // total rotation mulipled default * cupnum
float TS = 2;
int grindready =0;

void setup() {
  // Initialize serial communication at 9600 baud rate
  Serial.begin(115200);
  ESP32PWM :: allocateTimer(0);
  ESP32PWM :: allocateTimer(1);
  ESP32PWM :: allocateTimer(2);
  ESP32PWM :: allocateTimer(3);
  myservo.setPeriodHertz(50);
  myservo.attach(servoPin, 400,2400);

  ESP32Encoder::useInternalWeakPullResistors = UP; // Enable the weak pull up resistors
  encoder.attachHalfQuad(27, 33); // Attache pins for use as encoder pins
  encoder.setCount(0);  // set starting count value after attaching

  /* configure LED PWM functionalitites */
  ledcSetup(ledChannel_1, freq, resolution);
  ledcSetup(ledChannel_2, freq, resolution);

  /* attach the channel to the GPIO to be controlled */
  ledcAttachPin(BIN_1, ledChannel_1);
  ledcAttachPin(BIN_2, ledChannel_2);

  // Set the button pins as inputs with pullup resistor enabled
  pinMode(BUTTON1_PIN, INPUT_PULLUP);
  pinMode(BUTTON2_PIN, INPUT_PULLUP);
  pinMode(BUTTON3_PIN, INPUT_PULLUP);
  Wire.begin(SDA_PIN, SCL_PIN);
  // Initialize LCD
  lcd.init();
  // Turn on LCD backlight
  lcd.backlight();
}
// button 1 is minus also mode 1
// button 2 is confirm
// button 3 is plus  also mode 3
void loop() {
  curtime = millis();
  if (laststep == 0){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("1 for personal");
    lcd.setCursor(0,1);
    lcd.print( test + "3 for modification");
    if(curtime - intertime > 500){
      test += 1;
      intertime = curtime;
    }
    if (test == 5){
      test = 0;
    }

  }
  if (laststep == 1){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(test + "press the switch");
    lcd.setCursor(0,1);
    lcd.print(test + "to start brewing");
    if(curtime - intertime > 600){
      test += 1;
      intertime = curtime;
    }
    if (test == 8){
      test = 0;
    }
    if (feedbackcheck ==0){
      checktime = curtime;
      feedbackcheck = 1;

    }
    if (curtime - checktime > 30000){
      laststep = 2;
      test = 0;
      feedbackcheck = 0;
    }

  }
  if(laststep == 2){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print( test + "press 1 for more flavor");
    lcd.setCursor(0,1);
    lcd.print( test + "press 3 for less flavor");
    if(curtime - intertime > 600){
      test += 1;
      intertime = curtime;
    }
    if (test == 10){
      test = 0;
    }
    if (feedbackcheck ==0){
      checktime = curtime;
      feedbackcheck = 1;

    }
    if (curtime - checktime  > 30000){
      laststep = 1;
      test = 0;
      feedbackcheck = 0;
    }
  }


  // Check if Button 1 is pushed
  if (digitalRead(BUTTON1_PIN) == LOW) {
    // Print a message to the serial monitor
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Button 1 is pushed!");
    Serial.println("Button 1 is pushed!");
    if((modcheck == 1)&&(laststep != 0)){
      mod1TS = mod1TS + 0.5;
    }
    modcheck = 1; // one for the personal
    laststep = 0;
    delay(300); // Add a delay to debounce the button
  }

  // Check if Button 3 is pushed
  if (digitalRead(BUTTON3_PIN) == LOW) {
    // Print a message to the serial monitor
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Button 3 is pushed!");
    Serial.println("Button 3 is pushed!");
    if((modcheck == 1)&&(laststep != 0)){
      mod1TS = mod1TS + 0.5;
    }
    modcheck = 3;  // 3 for the modification
    laststep = 0;
    delay(300); // Add a delay to debounce the button
  }

  if (digitalRead(BUTTON4_PIN) == LOW) {
    // Print a message to the serial monitor
    delay(300); // Add a delay to debounce the button
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Button 4 is pushed!");
    Serial.println("Button 4 is pushed!");
    laststep = 0;
    if (digitalRead(BUTTON4_PIN) == LOW) {
      // Print a message to the serial monitor
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("cleaning");
      Serial.println("cleaning");
      myservo.write(180);
      delay(1000);
      for(int i=0; i < 3 ; i +=1 ){
        myservo.write(160);
        delay(400);
        myservo.write(180);
        delay(400);
      }
      myservo.write(0);
      delay(1000); // Add a delay to debounce the button
    }
    delay(300);
  }
  // Check if Button 2 is pushed meaning the confirm is pressed after choosing the mode
  if (digitalRead(BUTTON2_PIN) == LOW) {
    delay(300);
    laststep = 0;
    while (true){
      Serial.println("showing screen 2, current cups of coffee = " + String(cupnum));
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print(String(cupnum) + " cups");
      lcd.setCursor(0,1);
      lcd.print("1 = +, 3 = -");
      if (digitalRead(BUTTON1_PIN) == LOW){
        cupnum += 1;  // button 1 for minus
        if (cupnum <1){
          cupnum = 1;
        }
        delay(300);
      }
      if (digitalRead(BUTTON3_PIN) == LOW){
        cupnum -= 1;  // button 3 for plus
        if (cupnum>5){
          cupnum =5;
        }
        delay(300);
      }
      if (digitalRead(BUTTON4_PIN) == LOW){
        break;
        break;
        break;
      }

      if (digitalRead(BUTTON2_PIN) == LOW){
        delay(300);
        if (modcheck == 1){
          Serial.println("screen 3.1 - turn on the switch for brewing"); // showing turn on switch for the personal coffee
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("Turn on the switch");
          lcd.setCursor(0,1);
          lcd.print("for brewing");
          delay(300);
          if (digitalRead(BUTTON4_PIN) == LOW){
            break;
            break;
          }
          grindready = 1;
        }
        else if (modcheck == 3){
          while (true) {
            Serial.println("screen 3.2 + showing # of tablespoon" + String(TS));
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print(String(TS) + " tablespoon");
            lcd.setCursor(0,1);
            lcd.print("1 = +, 3 = -");
            if (digitalRead(BUTTON1_PIN) == LOW){
              TS += 0.5;
              if (TS < 1){
                TS = 1;
              }              
              delay(300);
            }
            if (digitalRead(BUTTON3_PIN) == LOW){
              TS -= 0.5;
              if (TS > 8){
                TS = 8;
              }
              delay(300);
            }
            if (digitalRead(BUTTON4_PIN) == LOW){
              break;
              break;
              break;break;
            }
            if (digitalRead(BUTTON2_PIN) == LOW){
              grindready = 1;
              break;
            }
          }

        }

      }
      if (grindready == 1){
        break;
      }
    }
    if (grindready == 1){
      Serial.print("grindmotor code");
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("preparing");
      lcd.setCursor(0,1);
      lcd.print("coffee grind");
      grindready = 0; 
      if (modcheck == 1){
        TS = mod1TS;
      }
      dp = cupnum * TS * 25+ dp_last; 
      TS = 2;
      while (true){
        time_now = millis();
        p = encoder.getCount() / (75.81 * 6) * 2 * M_PI;
        int pwmzero = 0;

        /* motor sine wave section */
        if ((  dp *0.9 < p)&&(p < dp * 1.1)){
          MAX_PWM_VOLTAGE =0;
          pwmzero = 1;
        }
        float output =  MAX_PWM_VOLTAGE;

        if (output > 0) {
          ledcWrite(ledChannel_1, output);
          ledcWrite(ledChannel_2, LOW);
        }
        else {
          ledcWrite(ledChannel_2, -output);
          ledcWrite(ledChannel_1, LOW);
        }
        pp = ( (p - p_last) / (dt*0.001)); // pp as actual speed

        pose = dp - p; // position error desired position - counted position
        posesum = posesum + pose; // position error sum 

        yd = pp * kd;

        if (p != dp){
          MAX_PWM_VOLTAGE = MAX_PWM_VOLTAGE + kp*pose + ki * posesum - kd * pp;
        }
        Serial.print(p);
        

        p_last = p  ; 
        if (pwmzero == 1){
          break;
        }


      

        while (millis() < (time_now + dt)) {};
      }
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Coffee grind");
      lcd.setCursor(0,1);
      lcd.print("Ready");
      grindready = 0; 
      laststep = 1;
      dp_last = dp;
    }
    

    delay(900);
  }
  
}
